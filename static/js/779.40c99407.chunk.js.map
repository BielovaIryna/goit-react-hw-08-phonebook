{"version":3,"file":"static/js/779.40c99407.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contactsStore.contacts;\nexport const selectIsLoading = state => state.contactsStore.isLoading;\nexport const selectError =state=>state.contactsStore.error\nexport const selectFilter =state => state.filterStore.filter;\n\nexport const selectVisibleContacts = createSelector(\n\t[ selectContacts, selectFilter],\n\t (contacts, filter) => {\n\t   return contacts.filter(contact => contact.name.toLowerCase()\n\t\t.includes(filter.toLowerCase()))\n\t }\n\t)","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Notify } from 'notiflix';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button, FormControl, FormLabel, Input, useColorModeValue } from '@chakra-ui/react';\n\nexport const ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setPhone] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\nconst bc =useColorModeValue('pink.500', 'pink.900')\n  const handlerSubmit = e => {\n    e.preventDefault();\n\n    const newContact = { name, number };\n    const hasDuplicates = contacts.some(\n      cont =>\n        cont.name.toLowerCase().trim() === newContact.name.toLowerCase().trim()\n    );\n    if (hasDuplicates) {\n      Notify.failure(`${newContact.name} already exists`);\n      return;\n    }\n    dispatch(addContact(newContact));\nconsole.log(newContact);\n    setName('');\n    setPhone('');\n  };\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n     <FormControl isRequired as ='form' onSubmit={handlerSubmit} mb={4}  maxW='xs'>\n      <FormLabel mb={2}>\n        Name:{' '}</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          required\n          mb={2}\n          placeholder='Andre Tan'\n          size={['sm', null, 'sm','md','lg']}\n          focusBorderColor={bc}\n         \n        />\n      \n      <FormLabel mb={2} >\n        Phone:{' '}</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"phone\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          required\n          placeholder='+380632535566'\n          mb={2}\n          size={['sm', null, 'sm','md','lg']}\n          focusBorderColor={bc}\n        />\n    \n      <Button type=\"submit\" variant='baseStyle'>\n        Submit\n      </Button>\n    </FormControl>\n  );\n};\n","import { Avatar, Flex, IconButton, ListItem, Text } from \"@chakra-ui/react\"\nimport { MdDeleteForever } from \"react-icons/md\";\nexport const ContactsItem = ({contact, del}) =>{\n\treturn(\n\t<ListItem mb={2}>\n\t\t<Flex gap ={2} alignItems='center'>\n\t<Avatar size='sm'/>\n\t<Text>{contact.name}:</Text>\n\t <Text>{contact.number}</Text>\n\t <IconButton size='md' type=\"button\" onClick={del} icon={<MdDeleteForever/>} variant='baseStyle'/>\n\t </Flex>\n\t </ListItem>\n\t\n\t)\n}","import { UnorderedList } from \"@chakra-ui/react\";\nimport { ContactsItem } from \"components/ContactsItem/ContactsItem\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\n\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n   const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n    \n  };\n  return (\n    <UnorderedList listStyleType='none'>\n      {contacts.map(contact => {\n        return (\n          <ContactsItem\n            key={contact.id}\n            contact={contact}\n            del={() => handleDeleteContact(contact.id)}\n          />\n        );\n      })}\n    </UnorderedList>\n  );\n};\n","import { FormControl, FormLabel, Input, useColorModeValue } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const bc =useColorModeValue('pink.500', 'pink.900')\n\n  const filterContact = e => {\n    dispatch(filterContacts(e.target.value.toLowerCase()));\n  };\n\n  return (\n    <FormControl maxW='xs'>\n    <FormLabel mr={4}>\n      Find contacts by name:</FormLabel>\n      <Input\n        type=\"text\"\n        value={filter}\n        placeholder=\"Search\"\n        onChange={filterContact}\n        size={['sm', null, 'sm','md','lg']}\n        focusBorderColor={bc}\n        mb={4}\n        \n      />\n    </FormControl>\n    \n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport Loader from 'components/Loader/Loader';\n\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { MainContainer } from 'components/MainContainer';\nimport { Box, Heading, Text } from '@chakra-ui/react';\nimport { Filter } from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <MainContainer>\n      <Heading\n        as=\"h1\"\n        size=\"3xl\"\n        textTransform=\"uppercase\"\n        textAlign=\"center\"\n        mb={4}\n      >\n        {' '}\n        Phonebook\n      </Heading>\n      <ContactsForm />\n      {error !== null && <p>error</p>}\n      {isLoading && <Loader />}\n      {contacts.length > 0 ? (\n        <Box>\n          <Heading\n            as=\"h2\"\n            size=\"2xl\"\n            textTransform=\"uppercase\"\n            textAlign=\"center\"\n            mb={4}\n          >\n            Contacts\n          </Heading>\n\n          <Filter />\n          <ContactList />\n        </Box>\n      ) : (\n        <Text>Unfortunately you don't have any contacts in your Phonebook</Text>\n      )}\n    </MainContainer>\n  );\n};\nexport default Contacts;\n"],"names":["selectContacts","state","contactsStore","contacts","selectIsLoading","isLoading","selectError","error","selectFilter","filterStore","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactsForm","useState","setName","number","setPhone","useSelector","dispatch","useDispatch","bc","useColorModeValue","handleChange","e","target","value","isRequired","as","onSubmit","preventDefault","newContact","some","cont","trim","Notify","addContact","console","log","mb","maxW","I","type","onChange","pattern","required","placeholder","size","focusBorderColor","variant","ContactsItem","del","gap","alignItems","onClick","icon","ContactList","listStyleType","map","id","deleteContact","Filter","mr","filterContacts","useEffect","fetchContacts","MainContainer","textTransform","textAlign","Loader","length"],"sourceRoot":""}