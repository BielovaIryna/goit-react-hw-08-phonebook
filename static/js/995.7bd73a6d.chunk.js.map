{"version":3,"file":"static/js/995.7bd73a6d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contactsStore.contacts;\nexport const selectIsLoading = state => state.contactsStore.isLoading;\nexport const selectError =state=>state.contactsStore.error\nexport const selectFilter =state => state.filterStore.filter;\n\nexport const selectVisibleContacts = createSelector(\n\t[ selectContacts, selectFilter],\n\t (contacts, filter) => {\n\t   return contacts.filter(contact => contact.name.toLowerCase()\n\t\t.includes(filter.toLowerCase()))\n\t }\n\t)","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Notify } from 'notiflix';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button, FormControl, FormLabel, Input, useColorModeValue } from '@chakra-ui/react';\n\nexport const ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setPhone] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\nconst bc =useColorModeValue('pink.500', 'pink.900')\n  const handlerSubmit = e => {\n    e.preventDefault();\n\n    const newContact = { name, number };\n    const hasDuplicates = contacts.some(\n      cont =>\n        cont.name.toLowerCase().trim() === newContact.name.toLowerCase().trim()\n    );\n    if (hasDuplicates) {\n      Notify.failure(`${newContact.name} already exists`);\n      return;\n    }\n    dispatch(addContact(newContact));\nconsole.log(newContact);\n    setName('');\n    setPhone('');\n  };\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n     <FormControl isRequired as ='form' onSubmit={handlerSubmit} mb={4}  maxW='xs'>\n      <FormLabel mb={2}>\n        Name:{' '}</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          required\n          mb={2}\n          placeholder='Andre Tan'\n          size={['sm', null, 'sm','md','lg']}\n          focusBorderColor={bc}\n         \n        />\n      \n      <FormLabel mb={2} >\n        Phone:{' '}</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"phone\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          required\n          placeholder='+380632535566'\n          mb={2}\n          size={['sm', null, 'sm','md','lg']}\n          focusBorderColor={bc}\n        />\n    \n      <Button type=\"submit\" variant='baseStyle'>\n        Submit\n      </Button>\n    </FormControl>\n  );\n};\n","\nexport const ContactsItem = ({contact, del}) =>{\n\treturn(\n\t<li >{contact.name}:\n\t <span >{contact.phone}</span>\n\t <button type=\"button\"  onClick={del}>Delete</button>\n\t </li>\n\t\n\t)\n}","import { ContactsItem } from \"components/ContactsItem/ContactsItem\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\n\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n   const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n    \n  };\n  return (\n    <ul>\n      {contacts.map(contact => {\n        return (\n          <ContactsItem\n            key={contact.id}\n            contact={contact}\n            del={() => handleDeleteContact(contact.id)}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport Loader from 'components/Loader/Loader';\n\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { MainContainer } from 'components/MainContainer';\nimport { Box, Heading, Text } from '@chakra-ui/react';\n\n\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <MainContainer>\n      <Heading as='h1' size='3xl' textTransform='uppercase' textAlign='center' mb={4}> Phonebook</Heading>\n      <ContactsForm />\n      {error !== null && <p>error</p>}\n      {isLoading && <Loader />}\n      {contacts.length > 0 ? (\n        <Box>\n          <Heading as ='h2' size ='2xl' textTransform='uppercase' textAlign='center' mb={4}>Contacts</Heading>\n\n        \n          <ContactList />\n        </Box>\n      ) : (\n        <Text>Unfortunately you don't have any contacts in your Phonebook</Text>\n      )}\n    </MainContainer>\n  );\n};\nexport default Contacts;\n"],"names":["selectContacts","state","contactsStore","contacts","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filterStore","filter","contact","name","toLowerCase","includes","ContactsForm","useState","setName","number","setPhone","useSelector","dispatch","useDispatch","bc","useColorModeValue","handleChange","e","target","value","isRequired","as","onSubmit","preventDefault","newContact","some","cont","trim","Notify","addContact","console","log","mb","maxW","I","type","onChange","pattern","required","placeholder","size","focusBorderColor","variant","ContactsItem","del","phone","onClick","ContactList","map","id","deleteContact","useEffect","fetchContacts","MainContainer","textTransform","textAlign","Loader","length"],"sourceRoot":""}